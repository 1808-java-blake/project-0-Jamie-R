package com.revature.daos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import com.revature.beans.User;
import com.revature.util.ConnectionUtil;

public class UserDaoJdbc implements UserDao {
	private ConnectionUtil cu = ConnectionUtil.cu;
	private Logger log = Logger.getRootLogger();
	
	static {
		try {
			Class.forName("org.postgresql.Driver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
	}
	

	@Override
	public void createUser(User u) {
		try (Connection conn = cu.getConnection()) {
			PreparedStatement ps = conn.prepareStatement(
					"INSERT INTO bank_users (username, pass_word, first_last_name, balance, is_admin) VALUES (?,?,?,?,?)", 
					new String[] {"user_id"});
			ps.setString(1, u.getUsername());
			ps.setString(2, u.getPassword());
			ps.setString(3, u.getName());
			ps.setDouble(4, u.getBalance());
			ps.setBoolean(5, u.getIsAdmin());
			int recordsCreated = ps.executeUpdate();
			log.trace(recordsCreated + " records created");
			
			ResultSet rs = ps.getGeneratedKeys();
			if(rs.next()) {
				int id = rs.getInt("user_id");
				u.setUserId(id);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage());
			for(StackTraceElement ste: e.getStackTrace()) {
				log.error(ste);
			}
			log.warn("failed to create new user");
		}

	}

	@Override
	public User findByUsernameAndPassword(String username, String password) {
		try (Connection conn = cu.getConnection()) {
			
			PreparedStatement ps = conn.prepareStatement(
					"SELECT * FROM bank_users WHERE username=? and pass_word=?");
			ps.setString(1, username);
			ps.setString(2, password);
			ResultSet rs = ps.executeQuery();
					
			if(rs.next()) {
				User u = new User();
				u.setUsername(rs.getString("username"));	
				u.setName(rs.getString("first_last_name"));
				u.setBalance(rs.getDouble("balance") );
				u.setIsAdmin(rs.getBoolean("is_admin"));
				return u;
			} else {
				log.warn("failed to find user with provided credentials from the db");
				return null;
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

		
	@Override
	public void updateUser(User u) {
		if (u == null) {
			return;
		}
		try (Connection conn = cu.getConnection()) {
			User currU = CurrentUser.getCurrentUser();
			PreparedStatement ps = conn.prepareStatement(
					"UPDATE bank_users SET (user_id = ?, username = ?, pass_word = ?, first_last_name = ?, balance = ?, is_admin = ?) VALUES (?,?,?,?,?) "
					+ "WHERE user_id = " + currU.getUserId());
			ps.setInt(1, currU.getUserId());
			ps.setString(1, u.getUsername());
			ps.setString(2, u.getPassword());
			ps.setString(3, u.getName());
			ps.setDouble(4, u.getBalance());
			ps.setBoolean(5, u.getIsAdmin());
			int recordsCreated = ps.executeUpdate();
			log.trace(recordsCreated + " record updated");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			log.error(e.getMessage());
			for(StackTraceElement ste: e.getStackTrace()) {
				log.error(ste);
			}
			log.warn("failed to update user");
		}

	}


}
